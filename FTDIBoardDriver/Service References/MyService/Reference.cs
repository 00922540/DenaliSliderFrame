//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTDIBoardDriver.MyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Http://Keysight.NPI.ServiceModel.FTDI", ConfigurationName="MyService.IFTDIService")]
    public interface IFTDIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Init_FDTIDevice", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Init_FDTIDeviceResponse")]
        void Init_FDTIDevice(byte Clock_select, int SPI);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Init_FDTIDevice", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Init_FDTIDeviceResponse")]
        System.Threading.Tasks.Task Init_FDTIDeviceAsync(byte Clock_select, int SPI);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Send_data", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Send_dataResponse")]
        void Send_data(int bit_length, byte[] buffer, int VE, int MSB, int CS, int Add_clock);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Send_data", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Send_dataResponse")]
        System.Threading.Tasks.Task Send_dataAsync(int bit_length, byte[] buffer, int VE, int MSB, int CS, int Add_clock);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Read_data", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Read_dataResponse")]
        byte[] Read_data(int Write_buffer_bit_length, byte[] Write_buffer, int Read_bit_length, int VE, int MSB, int CS, int Read_VE, int Add_clock);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Read_data", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/Read_dataResponse")]
        System.Threading.Tasks.Task<byte[]> Read_dataAsync(int Write_buffer_bit_length, byte[] Write_buffer, int Read_bit_length, int VE, int MSB, int CS, int Read_VE, int Add_clock);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/FDTI_close", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/FDTI_closeResponse")]
        void FDTI_close();
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/FDTI_close", ReplyAction="Http://Keysight.NPI.ServiceModel.FTDI/IFTDIService/FDTI_closeResponse")]
        System.Threading.Tasks.Task FDTI_closeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFTDIServiceChannel : FTDIBoardDriver.MyService.IFTDIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FTDIServiceClient : System.ServiceModel.ClientBase<FTDIBoardDriver.MyService.IFTDIService>, FTDIBoardDriver.MyService.IFTDIService {
        
        public FTDIServiceClient() {
        }
        
        public FTDIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FTDIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FTDIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FTDIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Init_FDTIDevice(byte Clock_select, int SPI) {
            base.Channel.Init_FDTIDevice(Clock_select, SPI);
        }
        
        public System.Threading.Tasks.Task Init_FDTIDeviceAsync(byte Clock_select, int SPI) {
            return base.Channel.Init_FDTIDeviceAsync(Clock_select, SPI);
        }
        
        public void Send_data(int bit_length, byte[] buffer, int VE, int MSB, int CS, int Add_clock) {
            base.Channel.Send_data(bit_length, buffer, VE, MSB, CS, Add_clock);
        }
        
        public System.Threading.Tasks.Task Send_dataAsync(int bit_length, byte[] buffer, int VE, int MSB, int CS, int Add_clock) {
            return base.Channel.Send_dataAsync(bit_length, buffer, VE, MSB, CS, Add_clock);
        }
        
        public byte[] Read_data(int Write_buffer_bit_length, byte[] Write_buffer, int Read_bit_length, int VE, int MSB, int CS, int Read_VE, int Add_clock) {
            return base.Channel.Read_data(Write_buffer_bit_length, Write_buffer, Read_bit_length, VE, MSB, CS, Read_VE, Add_clock);
        }
        
        public System.Threading.Tasks.Task<byte[]> Read_dataAsync(int Write_buffer_bit_length, byte[] Write_buffer, int Read_bit_length, int VE, int MSB, int CS, int Read_VE, int Add_clock) {
            return base.Channel.Read_dataAsync(Write_buffer_bit_length, Write_buffer, Read_bit_length, VE, MSB, CS, Read_VE, Add_clock);
        }
        
        public void FDTI_close() {
            base.Channel.FDTI_close();
        }
        
        public System.Threading.Tasks.Task FDTI_closeAsync() {
            return base.Channel.FDTI_closeAsync();
        }
    }
}
